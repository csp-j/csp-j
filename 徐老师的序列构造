徐老师的序列构造
徐老师上次最近学习了一种有趣的题型——《构造题》，这种题目是根据题意去构造一组符合规则的输出，有的是序列，有的是数据结构，有的是图和树

今天徐老师做了一道进阶的题目，这道题的要求如下：
1. 数组中的元素 aia_iai​ 必须满足 1≤ai≤n1 \leq a_i \leq n1≤ai​≤n
2. 数组中的元素个数 lenlenlen 必须满足 1≤len≤m1 \leq len \leq m1≤len≤m
3. 数组中的任意相邻的两个数字 aia_iai​ 和 ai+1a_{i+1}ai+1​ 必须满足 ai+1%ai=0a_{i+1} \%a_i = 0ai+1​%ai​=0

现在徐老师已经完成了这道题，他当然也确定他的代码是正确的

但是他想知道这道题有多少种完成方式？即他想知道有多少种符合要求的不同数组

这里我们认为只要两个数组长度或者任意一个数字不同就是不同的方案

输入格式
输入第一行包含两个正整数 n,mn,mn,m，表示题目给出的限制条件
|测试数据|nnn|
|:---:|:---:|
|1∼51 \sim 51∼5|1≤n,m≤1001 \leq n,m \leq 1001≤n,m≤100|
|5∼105 \sim 105∼10|1≤n,m≤20001 \leq n,m \leq 20001≤n,m≤2000|

输出格式
输出一个整数表示方案数，由于答案可能很大，请将答案对 1e9+71e9+71e9+7 取模

样例
输入数据 1
2 2
Copy
输出数据 1
5
Copy
提示
有五种满足方案的序列：[1],[2],[1,1],[1,2],[2,2][1],[2],[1,1],[1,2],[2,2][1],[2],[1,1],[1,2],[2,2]
#include <bits/stdc++.h>
using namespace std;
using LL=long long;
const LL mod=1e9+7;
LL ans,n,m,a[2006],dp[2006][2006];
int main() {
	//freopen("structure.in","r",stdin);
    //freopen("structure.out","w",stdout);
    scanf("%lld%lld",&n,&m);
    for (LL i=1;i<=n;++i) {
    	dp[1][i]=1;
	}
    for (LL i=1;i<=m;++i) {
    	for (LL j=1;j<=n;++j) {
    		for (LL k=1;k*j<=n;++k) {
    			dp[i+1][j*k]+=dp[i][j];
    			dp[i+1][j*k]%=mod;
			}
			ans+=dp[i][j];
			ans%=mod;
		}
	} 
	printf("%lld\n",ans);
	return 0;
}//2000 2000
